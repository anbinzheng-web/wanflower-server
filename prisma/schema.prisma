generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// 产品相关模型
// ================================

model Product {
  id            Int                @id @default(autoincrement())
  name          String             @db.VarChar(255)
  description   String             @db.Text       // 改为 Text 支持更长描述
  short_desc    String?            @db.VarChar(500) // 简短描述，用于列表展示
  price         Decimal            @db.Decimal(10, 2)
  original_price Decimal?          @db.Decimal(10, 2) // 原价，用于显示折扣
  stock         Int                @default(0)
  min_stock     Int                @default(0)    // 最小库存预警
  weight        Decimal?           @db.Decimal(8, 3) // 重量(kg)，用于物流计算
  dimensions    Json?              // 尺寸信息 {length, width, height}
  sku           String?            @unique @db.VarChar(100) // 商品编码
  barcode       String?            @db.VarChar(100) // 条形码
  status        ProductStatus      @default(ACTIVE)
  sales_count   Int                @default(0)
  view_count    Int                @default(0)
  sort_order    Int                @default(0)    // 排序权重
  
  // 关联关系
  category_id   Int?               // 产品分类
  category      ProductCategory?   @relation(fields: [category_id], references: [id])
  attributes    ProductAttribute[]
  media         ProductMedia[]     // 替换原来的 images，支持视频
  reviews       ProductReview[]
  order_items   OrderItem[]        // 订单项
  cart_items    CartItem[]         // 购物车项
  
  // SEO 相关
  seo_title     String?            @db.VarChar(255)
  seo_description String?          @db.VarChar(500)
  seo_keywords  String[]           // 关键词数组
  
  created_at    DateTime           @default(now())
  updated_at    DateTime           @updatedAt
  deleted_at    DateTime?          // 软删除

  @@index([category_id])
  @@index([status])
  @@index([created_at])
}

// 产品分类
model ProductCategory {
  id          Int               @id @default(autoincrement())
  name        String            @db.VarChar(100)
  slug        String            @unique @db.VarChar(100)
  description String?           @db.Text
  image_url   String?           @db.VarChar(500)
  parent_id   Int?              // 支持多级分类
  parent      ProductCategory?  @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children    ProductCategory[] @relation("CategoryHierarchy")
  products    Product[]
  sort_order  Int               @default(0)
  is_active   Boolean           @default(true)
  
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  
  @@index([parent_id])
  @@index([slug])
}

// 产品媒体文件（图片、视频）
model ProductMedia {
  id          Int              @id @default(autoincrement())
  product_id  Int
  type        MediaType        // IMAGE, VIDEO
  storage_type StorageType     @default(LOCAL) // LOCAL, CDN
  
  // 本地存储字段
  local_path  String?          @db.VarChar(500) // 本地文件路径
  filename    String?          @db.VarChar(255) // 原始文件名
  
  // CDN 存储字段
  cdn_url     String?          @db.VarChar(500) // CDN URL
  cdn_key     String?          @db.VarChar(255) // CDN 存储键
  
  // 通用字段
  file_size   BigInt?          // 文件大小（字节）
  mime_type   String?          @db.VarChar(100) // MIME 类型
  width       Int?             // 图片/视频宽度
  height      Int?             // 图片/视频高度
  duration    Int?             // 视频时长（秒）
  
  // 缩略图（用于视频预览）
  thumbnail_local String?      @db.VarChar(500)
  thumbnail_cdn   String?      @db.VarChar(500)
  
  alt_text    String?          @db.VarChar(255) // 替代文本
  sort_order  Int              @default(0)
  media_category MediaCategory @default(MAIN)   // MAIN, GALLERY, DETAIL
  
  product     Product          @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  
  @@index([product_id])
  @@index([type])
  @@index([storage_type])
}

model ProductAttribute {
  id         Int     @id @default(autoincrement())
  product_id Int
  name       String  @db.VarChar(100)
  value      String  @db.VarChar(255)
  sort_order Int     @default(0)
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  @@index([product_id])
}

// ================================
// 订单相关模型
// ================================

model Order {
  id              Int           @id @default(autoincrement())
  order_number    String        @unique @db.VarChar(50) // 订单号
  user_id         Int
  user            User          @relation(fields: [user_id], references: [id])
  
  // 订单状态
  status          OrderStatus   @default(PENDING)
  
  // 金额信息
  subtotal        Decimal       @db.Decimal(10, 2) // 商品小计
  shipping_fee    Decimal       @db.Decimal(10, 2) @default(0) // 运费
  tax_amount      Decimal       @db.Decimal(10, 2) @default(0) // 税费
  discount_amount Decimal       @db.Decimal(10, 2) @default(0) // 折扣金额
  total_amount    Decimal       @db.Decimal(10, 2) // 总金额
  
  // 收货地址
  shipping_address Json         // 收货地址信息
  
  // 支付信息（预留接口）
  payment_method  String?       @db.VarChar(50)  // 支付方式
  payment_status  PaymentStatus @default(PENDING)
  payment_id      String?       @db.VarChar(100) // 第三方支付ID
  paid_at         DateTime?     // 支付时间
  
  // 物流信息（预留接口）
  shipping_method String?       @db.VarChar(50)  // 物流方式
  tracking_number String?       @db.VarChar(100) // 物流单号
  shipped_at      DateTime?     // 发货时间
  delivered_at    DateTime?     // 签收时间
  
  // 备注信息
  customer_notes  String?       @db.Text         // 客户备注
  admin_notes     String?       @db.Text         // 管理员备注
  
  // 关联关系
  items           OrderItem[]
  reviews         ProductReview[] // 订单完成后的评论
  payment_logs    PaymentLog[]    // 支付记录
  
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  
  @@index([user_id])
  @@index([status])
  @@index([order_number])
  @@index([created_at])
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  order_id    Int
  product_id  Int
  quantity    Int
  unit_price  Decimal @db.Decimal(10, 2) // 下单时的单价
  total_price Decimal @db.Decimal(10, 2) // 小计
  
  // 快照信息（防止商品信息变更影响历史订单）
  product_snapshot Json // 商品信息快照
  
  order       Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [product_id], references: [id])
  
  @@index([order_id])
  @@index([product_id])
}

// 购物车
model Cart {
  id         Int        @id @default(autoincrement())
  user_id    Int        @unique
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items      CartItem[]
  
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model CartItem {
  id         Int     @id @default(autoincrement())
  cart_id    Int
  product_id Int
  quantity   Int     @default(1)
  
  cart       Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  @@unique([cart_id, product_id]) // 同一购物车中同一商品只能有一条记录
  @@index([cart_id])
  @@index([product_id])
}

// ================================
// 支付相关模型
// ================================

// 支付日志表
model PaymentLog {
  id                    Int           @id @default(autoincrement())
  order_id              Int
  payment_method        PaymentMethod
  amount                Decimal       @db.Decimal(10, 2)
  payment_id            String?       @db.VarChar(100) // 第三方支付ID
  paid_at               DateTime
  payment_notes         String?       @db.Text
  transaction_reference String?       @db.VarChar(100) // 交易凭证号
  bank_name             String?       @db.VarChar(100) // 银行名称
  account_last_four     String?       @db.VarChar(10)  // 账户后四位
  admin_id              Int           // 确认支付的管理员ID
  
  // 关联关系
  order                 Order         @relation(fields: [order_id], references: [id])
  admin                 User          @relation(fields: [admin_id], references: [id])
  
  created_at            DateTime      @default(now())
  
  @@index([order_id])
  @@index([payment_method])
  @@index([paid_at])
  @@index([admin_id])
}

// ================================
// 评论相关模型
// ================================

model ProductReview {
  id            Int       @id @default(autoincrement())
  product_id    Int
  user_id       Int
  order_id      Int       // 必须关联订单，确保用户购买过才能评论
  
  rating        Int       // 1-5 星评分
  content       String    @db.Text // 评论内容
  
  // 评论媒体文件
  media         ReviewMedia[]
  
  // 回复相关
  parent_id     Int?      // 父评论ID，用于回复
  parent        ProductReview? @relation("ReviewReplies", fields: [parent_id], references: [id])
  replies       ProductReview[] @relation("ReviewReplies")
  
  // 审核状态
  status        ReviewStatus @default(PENDING) // 审核状态
  is_visible    Boolean   @default(true)
  
  // 有用性统计
  helpful_count Int       @default(0) // 有用数（冗余字段，便于排序）
  helpful_votes ReviewHelpfulVote[] // 投票记录
  
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime? // 软删除
  
  product       Product   @relation(fields: [product_id], references: [id])
  user          User      @relation(fields: [user_id], references: [id])
  order         Order     @relation(fields: [order_id], references: [id])
  
  @@index([product_id])
  @@index([user_id])
  @@index([order_id])
  @@index([status])
  @@index([created_at])
  @@index([helpful_count]) // 按有用性排序的索引
}

// 评论媒体文件
model ReviewMedia {
  id          Int              @id @default(autoincrement())
  review_id   Int
  type        MediaType        // IMAGE, VIDEO
  storage_type StorageType     @default(LOCAL)
  
  // 本地存储
  local_path  String?          @db.VarChar(500)
  filename    String?          @db.VarChar(255)
  
  // CDN 存储
  cdn_url     String?          @db.VarChar(500)
  cdn_key     String?          @db.VarChar(255)
  
  // 文件信息
  file_size   BigInt?          // 文件大小限制：图片5MB，视频50MB
  mime_type   String?          @db.VarChar(100)
  width       Int?
  height      Int?
  duration    Int?             // 视频时长限制：最大60秒
  
  // 缩略图
  thumbnail_local String?      @db.VarChar(500)
  thumbnail_cdn   String?      @db.VarChar(500)
  
  sort_order  Int              @default(0)
  
  review      ProductReview    @relation(fields: [review_id], references: [id], onDelete: Cascade)
  
  created_at  DateTime         @default(now())
  
  @@index([review_id])
  @@index([type])
}

// 评论有用性投票表
model ReviewHelpfulVote {
  id        Int           @id @default(autoincrement())
  review_id Int
  user_id   Int
  is_helpful Boolean     // true=有用, false=没用
  
  review    ProductReview @relation(fields: [review_id], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  
  @@unique([review_id, user_id]) // 每个用户对每条评论只能投票一次
  @@index([review_id])
  @@index([user_id])
}

model Blog {
  id          Int        @id @default(autoincrement())
  title       String     @db.VarChar(255)       // 博客标题
  slug        String     @db.VarChar(255)       // SEO URL 友好 slug
  author      String     @db.VarChar(100)       // 作者名称
  language    String     @db.VarChar(10)        // 语言代码，如 en, zh
  md          String     @db.Text               // Markdown 内容（支持 HTML）
  summary     String?    @db.Text               // 博客摘要，可用于列表或 SEO
  cover_image String?    @db.VarChar(512)       // 封面图片 URL
  reading_time Int      // 预估阅读时间，单位分钟
  seo         Json?     // SEO 相关 JSON { title, description, keywords[] }
  status      BlogStatus @default(DRAFT)        // 发布状态
  view_count  Int        @default(0)            // 浏览量
  project_type String    @db.VarChar(50)        // 项目类型，用于区分不同项目
  is_featured Boolean    @default(false)        // 是否精选文章
  sort_order  Int        @default(0)            // 排序权重
  
  // 关联关系
  tags        BlogTag[]  // 博客标签（多对多）
  categories  BlogCategory[] // 博客分类（多对多）

  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@unique([slug, language, project_type]) // 确保同一语言和项目类型下 slug 唯一
  @@index([project_type])
  @@index([status])
  @@index([is_featured])
  @@index([created_at])
}

// 博客标签
model BlogTag {
  id          Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(50)  // 标签名称
  slug        String     @unique @db.VarChar(50)  // 标签 slug
  description String?    @db.Text                 // 标签描述
  color       String?    @db.VarChar(7)           // 标签颜色（十六进制）
  project_type String    @db.VarChar(50)          // 所属项目类型
  is_active   Boolean    @default(true)           // 是否启用
  sort_order  Int        @default(0)              // 排序权重
  
  // 关联关系
  blogs       Blog[]     // 博客文章（多对多）
  
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  
  @@index([project_type])
  @@index([is_active])
}

// 博客分类
model BlogCategory {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)         // 分类名称
  slug        String     @db.VarChar(100)         // 分类 slug
  description String?    @db.Text                 // 分类描述
  parent_id   Int?       // 支持多级分类
  parent      BlogCategory? @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children    BlogCategory[] @relation("CategoryHierarchy")
  project_type String    @db.VarChar(50)          // 所属项目类型
  is_active   Boolean    @default(true)           // 是否启用
  sort_order  Int        @default(0)              // 排序权重
  
  // 关联关系
  blogs       Blog[]     // 博客文章（多对多）
  
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  
  @@index([parent_id])
  @@index([project_type])
  @@index([is_active])
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// ================================
// 用户相关模型
// ================================

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String?  // 允许为空，支持第三方登录用户
  role       Role     @default(user)
  
  // 用户基本信息
  username   String?  @db.VarChar(50)
  first_name String?  @db.VarChar(50)
  last_name  String?  @db.VarChar(50)
  phone      String?  @db.VarChar(20)
  avatar_url String?  @db.VarChar(500)
  birth_date DateTime?
  gender     Gender?
  
  // 账户状态
  is_active     Boolean   @default(true)
  is_verified  Boolean   @default(false)
  last_login   DateTime?  // 最后登录/活跃时间（包括refresh token）
  
  // 第三方登录信息
  oauth_providers OAuthProvider[]
  
  // 设备管理
  user_devices UserDevice[]
  
  // 关联关系
  cart           Cart?
  orders         Order[]
  reviews        ProductReview[]
  addresses      UserAddress[]   // 用户地址
  review_votes   ReviewHelpfulVote[] // 评论投票记录
  refresh_tokens RefreshToken[] // Refresh Token
  payment_logs   PaymentLog[]   // 支付记录（作为管理员确认的支付）
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  @@index([email])
  @@index([role])
  @@index([is_verified])
}

// 用户地址
model UserAddress {
  id           Int     @id @default(autoincrement())
  user_id      Int
  name         String  @db.VarChar(100) // 收货人姓名
  phone        String  @db.VarChar(20)  // 收货人电话
  country      String  @db.VarChar(50)
  province     String  @db.VarChar(50)  // 省/州
  city         String  @db.VarChar(50)  // 城市
  district     String? @db.VarChar(50)  // 区/县
  address_line String  @db.VarChar(255) // 详细地址
  postal_code  String? @db.VarChar(20)  // 邮政编码
  is_default   Boolean @default(false)  // 是否默认地址
  
  user         User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  @@index([user_id])
}

// 邮箱验证码
model EmailVerification {
  id         Int      @id @default(autoincrement())
  email      String   @db.VarChar(255)
  code       String   @db.VarChar(10)   // 验证码
  type       VerificationType            // 验证类型：注册、重置密码等
  expires_at DateTime                    // 过期时间
  is_used    Boolean  @default(false)    // 是否已使用
  
  created_at DateTime @default(now())
  
  @@index([email])
  @@index([expires_at])
}

// 第三方登录提供商
model OAuthProvider {
  id         Int      @id @default(autoincrement())
  user_id    Int
  provider   String   @db.VarChar(50)   // google, facebook, github等
  provider_id String  @db.VarChar(255)  // 第三方平台的用户ID
  email      String?  @db.VarChar(255)   // 第三方平台的邮箱
  name       String?  @db.VarChar(100)   // 第三方平台的用户名
  avatar_url String?  @db.VarChar(500)   // 第三方平台的头像
  
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  @@unique([provider, provider_id])
  @@index([user_id])
  @@index([provider])
}

// 用户设备管理
model UserDevice {
  id           Int      @id @default(autoincrement())
  user_id      Int
  device_id    String   @db.VarChar(255)  // 设备唯一标识
  device_name  String?  @db.VarChar(100)  // 设备名称
  device_type  String?  @db.VarChar(50)   // 设备类型：mobile, desktop, tablet
  user_agent   String?  @db.VarChar(500)   // 用户代理
  ip_address   String?  @db.VarChar(45)   // IP地址
  is_trusted   Boolean  @default(false)    // 是否受信任设备
  last_active  DateTime @default(now())    // 最后活跃时间
  
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  @@unique([user_id, device_id])
  @@index([user_id])
  @@index([device_id])
}

// Refresh Token管理
model RefreshToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  device_id  String?  @db.VarChar(255)  // 关联设备
  token      String   @db.VarChar(500)  // Refresh Token
  expires_at DateTime                   // 过期时间
  is_revoked Boolean  @default(false)   // 是否已撤销
  
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  @@index([user_id])
  @@index([token])
  @@index([expires_at])
}

// 登录尝试记录（防暴力破解）
model LoginAttempt {
  id         Int      @id @default(autoincrement())
  email      String?  @db.VarChar(255)
  ip_address String   @db.VarChar(45)
  user_agent String?  @db.VarChar(500)
  success    Boolean                   // 是否成功
  reason     String?  @db.VarChar(100) // 失败原因
  
  created_at DateTime @default(now())
  
  @@index([email])
  @@index([ip_address])
  @@index([created_at])
}

// ================================
// 枚举类型定义
// ================================

// 媒体类型
enum MediaType {
  IMAGE
  VIDEO
}

// 存储类型
enum StorageType {
  LOCAL  // 本地存储
  CDN    // CDN存储
}

// 媒体分类
enum MediaCategory {
  MAIN     // 主图/主视频
  GALLERY  // 画廊/展示
  DETAIL   // 详情图/视频
}

// 产品状态
enum ProductStatus {
  ACTIVE    // 上架
  INACTIVE  // 下架
  DRAFT     // 草稿
}

// 订单状态
enum OrderStatus {
  PENDING     // 待付款
  PAID        // 已付款
  PROCESSING  // 处理中
  SHIPPED     // 已发货
  DELIVERED   // 已送达
  COMPLETED   // 已完成
  CANCELLED   // 已取消
  REFUNDED    // 已退款
}

// 支付状态
enum PaymentStatus {
  PENDING   // 待支付
  PAID      // 已支付
  FAILED    // 支付失败
  REFUNDED  // 已退款
  CANCELLED // 已取消
}

// 评论状态
enum ReviewStatus {
  PENDING   // 待审核
  APPROVED  // 已通过
  REJECTED  // 已拒绝
}

// 用户角色
enum Role {
  user    // 用户
  staff   // 员工
  admin   // 管理员
}

// 性别
enum Gender {
  MALE
  FEMALE
  OTHER
}

// 验证类型
enum VerificationType {
  REGISTER     // 注册验证
  RESET_PASSWORD // 重置密码
  CHANGE_EMAIL   // 更换邮箱
  TWO_FACTOR     // 双因素认证
}

// 支付方式
enum PaymentMethod {
  CASH         // 现金
  BANK_TRANSFER // 银行转账
  WIRE_TRANSFER // 电汇
  CHECK        // 支票
  STRIPE       // Stripe支付
  PAYPAL       // PayPal支付
  ALIPAY       // 支付宝
  WECHAT_PAY   // 微信支付
  OTHER        // 其他
}
