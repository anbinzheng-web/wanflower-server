import { NestFactory } from '@nestjs/core';
import type { NestExpressApplication } from '@nestjs/platform-express';
import { AppModule } from './app.module';
import { SwaggerModule, DocumentBuilder, SwaggerCustomOptions } from '@nestjs/swagger'; // ÂØºÂÖ• Swagger Áõ∏ÂÖ≥Ê®°Âùó
import { ResponseInterceptor } from 'shared/interceptors/response.interceptor';
import { ValidationPipe } from '@nestjs/common';
import { registerGlobalProperties } from './globalProperties';
import path from 'path';
import fs from 'fs';
import cookieParser from 'cookie-parser';

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule);
  
  // ÈÖçÁΩÆ cookie Ëß£Êûê‰∏≠Èó¥‰ª∂
  app.use(cookieParser());
  
  // ËÆæÁΩÆÂÖ®Â±ÄÂâçÁºÄ
  app.setGlobalPrefix('api');
  
  app.useGlobalPipes(
    new ValidationPipe({
      transform: true, // üëà Ëá™Âä®Á±ªÂûãËΩ¨Êç¢
      whitelist: true, // ËøáÊª§Êéâ DTO ÈáåÊ≤°ÂÆö‰πâÁöÑÂ≠óÊÆµ
      forbidNonWhitelisted: true, // ÈÅáÂà∞ÈùûÊ≥ïÂ≠óÊÆµÁõ¥Êé•Êä•Èîô
      transformOptions: { enableImplicitConversion: false }, // Êàë‰ª¨Áî® @Transform ÊòæÂºèËΩ¨Êç¢
    }),
  );
  app.useGlobalInterceptors(new ResponseInterceptor)
  // AllExceptionsFilter Áé∞Âú®ÈÄöËøá APP_FILTER Âú®Ê®°Âùó‰∏≠Ê≥®ÂÜå
  app.useStaticAssets(process.env.IMAGE_LOCAL_UPLOAD_PATH || 'uploads', { prefix: '/images' });

  // ÈÖçÁΩÆ Swagger ÊñáÊ°£
  const config = new DocumentBuilder()
    .setTitle('wanflower') // ËÆæÁΩÆ API Ê†áÈ¢ò
    .setDescription('shopping') // ËÆæÁΩÆ API ÊèèËø∞
    .setVersion('1.0') // ËÆæÁΩÆ API ÁâàÊú¨
    // .addTag('‰Ω†ÁöÑ API Ê†áÁ≠æ') // Ê∑ªÂä† API Ê†áÁ≠æ
    .addBasicAuth() // Ê∑ªÂä†Âü∫Êú¨ËÆ§ËØÅÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
    .build(); // ÊûÑÂª∫ÈÖçÁΩÆ
  const document = SwaggerModule.createDocument(app, config);
  const options: SwaggerCustomOptions = {
    swaggerOptions: {
      persistAuthorization: true, // ‰øùÊåÅÊéàÊùÉ‰ø°ÊÅØ
    },
    customSiteTitle: 'wanflower api documents', // ËÆæÁΩÆËá™ÂÆö‰πâÈ°µÈù¢Ê†áÈ¢ò
    jsonDocumentUrl: 'openapi.json'
  };
  SwaggerModule.setup('docs', app, document, options); // 'docs' ÊòØ Swagger UI ÁöÑËÆøÈóÆË∑ØÂæÑ

  await app.listen(process.env.PORT || 3000);
}
registerGlobalProperties();
(() => {
  const uploadPath = path.join(process.cwd(), process.env.IMAGE_LOCAL_UPLOAD_PATH!);
  if (!fs.existsSync(uploadPath)) {
    fs.mkdirSync(uploadPath, { recursive: true }); // ÈÄíÂΩíÂàõÂª∫
  }
})();
bootstrap();

// main.ts
(BigInt.prototype as any).toJSON = function() {
  return this.toString();
};