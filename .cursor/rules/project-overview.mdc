---
alwaysApply: true
---

# 万花电商系统 - 项目概览

## 项目架构

### 后端服务 (wanflower-server)
- **技术栈**: NestJS + TypeScript + PostgreSQL + Prisma
- **核心功能**: 认证系统、产品管理、订单系统、用户管理、博客系统、评论系统
- **安全特性**: 双Token机制、OAuth2集成、设备管理、防暴力破解
- **API文档**: Swagger/OpenAPI 自动生成

### 前端应用
- **管理后台** (apps/admin): React 19 + TypeScript + Vite + Ant Design + Tailwind CSS
- **用户端网站** (apps/wanflower.com): Next.js 15 + TypeScript + Tailwind CSS
- **共享包** (packages): backend-api (API客户端), react-markdown (自定义组件)

## 核心模块设计

### 1. 认证系统 (auth/)
- **双Token机制**: Access Token (15分钟) + Refresh Token (7天)
- **第三方登录**: Google OAuth2 集成
- **安全防护**: 邮箱验证、防暴力破解、设备管理
- **权限控制**: 基于角色的访问控制 (USER/STAFF/ADMIN)

### 2. 产品管理 (product/)
- **产品CRUD**: 完整的增删改查操作
- **分类管理**: 多级分类结构
- **媒体管理**: 图片/视频上传，支持本地存储和CDN
- **库存管理**: 库存数量、预警机制
- **SEO优化**: 独立的SEO字段

### 3. 订单系统 (order/)
- **订单流程**: 从创建到完成的完整状态管理
- **购物车**: 用户购物车管理
- **支付集成**: 预留支付接口
- **物流管理**: 预留物流接口

### 4. 用户管理 (user/)
- **用户信息**: 基础信息管理
- **权限系统**: 角色和权限控制
- **活动记录**: 用户操作日志
- **设备管理**: 设备指纹识别和信任机制

### 5. 博客系统 (blog/)
- **内容管理**: Markdown格式，支持HTML
- **多语言**: 国际化支持
- **SEO优化**: 完整的SEO字段
- **标签分类**: 灵活的标签和分类系统

### 6. 评论系统 (review/)
- **产品评论**: 用户对产品的评价
- **媒体管理**: 评论图片/视频上传
- **审核机制**: 评论审核流程

## 数据库设计

### 核心表结构
- **User**: 用户基础信息，支持第三方登录
- **Product**: 产品信息，包含完整的电商字段
- **Order**: 订单信息，支持完整的订单流程
- **Blog**: 博客文章，支持Markdown和SEO
- **Review**: 产品评论，支持媒体上传

### 安全相关表
- **EmailVerification**: 邮箱验证码管理
- **RefreshToken**: 刷新令牌管理
- **UserDevice**: 用户设备管理
- **LoginAttempt**: 登录尝试记录

## API设计原则

### RESTful设计
- 统一的响应格式 (`ApiResponse<T>`)
- 标准HTTP状态码
- 合理的资源命名
- 完整的Swagger文档

### 权限控制
- 基于角色的访问控制 (RBAC)
- JWT令牌验证
- 接口级权限控制
- 设备绑定验证

### 响应格式
```typescript
// 成功响应
{
  code: 0,
  data: T,
  message: "success"
}

// 分页响应
{
  code: 0,
  data: {
    records: T[],
    total: number,
    page: number,
    page_size: number
  },
  message: "success"
}
```

## 开发规范

### 代码规范
- **TypeScript**: 严格模式，完整类型定义
- **命名规范**: PascalCase (类), camelCase (变量), kebab-case (文件)
- **函数设计**: 单一职责，不超过20行
- **错误处理**: 统一异常处理，详细错误信息

### 文档规范
- **API文档**: Swagger自动生成
- **代码注释**: 中文注释，解释复杂逻辑
- **部署指南**: 完整的部署文档

### 测试规范
- **单元测试**: 服务层业务逻辑测试
- **集成测试**: API接口测试
- **E2E测试**: 完整流程测试

## 安全特性

### 认证安全
- 双Token机制，Refresh Token存储在HttpOnly Cookie
- 设备指纹识别，支持设备管理
- 登录尝试限制，防暴力破解
- 邮箱验证机制，确保账号真实性

### 数据安全
- 密码bcrypt加密存储
- SQL注入防护 (Prisma ORM)
- XSS防护 (输入验证)
- CSRF防护 (SameSite Cookie)

### 运维安全
- 详细的操作日志
- 性能监控和错误追踪
- 自动清理过期数据
- 异常行为检测

## 部署架构

### 开发环境
- 本地开发服务器，热重载支持
- 数据库: PostgreSQL (本地)
- 文件存储: 本地存储
- 调试工具: 完整的调试支持

### 生产环境
- Docker容器化部署
- Nginx反向代理
- 数据库集群 (计划中)
- CDN加速 (计划中)

## 监控和日志

### 日志系统
- 结构化日志 (JSON格式)
- 多级别日志 (DEBUG/INFO/WARN/ERROR)
- 性能监控 (响应时间、数据库查询)
- 错误追踪 (堆栈信息、上下文)

### 监控指标
- API响应时间和成功率
- 数据库性能指标
- 系统资源使用情况
- 业务指标统计

## 扩展性设计

### 微服务架构 (计划中)
- 服务拆分和独立部署
- 服务间通信 (gRPC/HTTP)
- 配置中心和服务发现
- 分布式事务处理

### 缓存策略
- Redis缓存 (计划中)
- 查询结果缓存
- 静态资源缓存
- CDN加速

### 消息队列 (计划中)
- 异步任务处理
- 事件驱动架构
- 服务解耦
- 可靠性保证

## 文档管理

### 文档结构
- **架构文档**: 系统设计、数据库设计、API规范
- **模块文档**: 各功能模块的详细说明
- **开发文档**: 环境搭建、代码规范、测试指南
- **运维文档**: 部署、监控、故障排查

### 文档编写原则
- **专注业务逻辑**: 文档应专注于架构设计和业务逻辑，避免重复实现细节
- **避免冗余信息**: 不要在文档中写入SQL建表语句，交给Prisma Schema管理
- **简化API描述**: 不要在文档中写入详细的请求/响应示例，交给Swagger文档管理
- **统一引用规范**: 使用"详细表结构请参考 Prisma Schema 文件"和"详细的API接口文档请参考 Swagger 文档"
- **职责明确**: 文档负责业务说明，技术实现交给专业工具

### 文档维护
- 代码变更时同步更新文档
- 定期审查和清理过时文档
- 统一的文档模板和格式

---

**重要提醒**:
1. 所有代码必须使用TypeScript，避免使用any类型
2. 遵循统一的命名规范和代码风格
3. 每个API接口必须有完整的Swagger文档
4. 重要功能必须有单元测试覆盖
5. 文档必须与代码保持同步更新
6. **文档编写必须专注业务逻辑和架构设计，避免重复实现细节**
7. **不要在文档中写入SQL建表语句，交给Prisma Schema管理**
8. **不要在文档中写入详细的API请求/响应示例，交给Swagger文档管理**